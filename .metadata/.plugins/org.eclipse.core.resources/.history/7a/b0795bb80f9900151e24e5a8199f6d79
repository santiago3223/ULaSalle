/*
 * main.cpp
 *
 *  Created on: 17 de nov. de 2015
 *      Author: santiago
 */

#include <fstream>
#include<iostream>
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include "BTreeNode.h"
using namespace std;



template<class T>
class BTree
{
    BTreeNode<T> *root;
    int t;
public:
    BTree(int _t)
    {  root = NULL;  t = _t; }

    //BTreeNode* search(int k)
    //{
    //	BTreeNode<T> * q = 0;
    //	return (root == NULL)? NULL : root->search(k, q);
    //}

    //void insert(int k);
    void insertar(int k);
    void printDot(char* p);
};



void BTree<T>::printDot(char* p)
	{
		ofstream file(p);
		file<<"digraph {"<<endl;
		root->printDot(file);
		file<<" }"<<endl;
	}


/*
BTreeNode<T> *BTreeNode::search(int k, BTreeNode<T> * &q)
{
	q = this;
    int i = 0;
    while (i < n && k > keys[i])
        i++;

    if (keys[i] == k)
        return this;

    if (leaf == true)
        return NULL;

    return C[i]->search(k, q);
}
*/
/*
bool BTreeNode::hayEspacio(int k){
		int i = 0;
	    while (i < n && k > keys[i])
	        i++;

	    if (keys[i] == k)
	        return false;

	    if (n<t)
	    	return true;

	    if (leaf == true)
	        return n < t;

	    return C[i]->hayEspacio(k);

}
*/
/*
void BTree::insert(int k)
{
    if (root == NULL)
    {
        root = new BTreeNode(t, true);
        root->keys[0] = k;
        root->n = 1;
    }
    else
    {
    	//BTreeNode<T> * q = 0;
    	//BTreeNode<T> * nn = root->search(k, q);
        if (root->n ==t && !root->hayEspacio(k))
        {
            BTreeNode<T> *s = new BTreeNode(t, false);

            s->C[0] = root;

            s->splitChild(0, root);

            int i = 0;
            if (s->keys[0] < k)
                i++;
            s->C[i]->insertNonFull(k);

            root = s;
        }
        else
            root->insertNonFull(k);
    }
}
*/
void BTree<T>::insertar(int k){
	if (root == NULL)
	{
	        root = new BTreeNode(t, true);
	        root->keys[0] = k;
	        root->n = 1;
	}else{
		BTreeNode<T> * p = 0;
		root->insertar(k,p);
		if(p){
				BTreeNode<T> *s = new BTreeNode<T>(t, false);
				s->C[0] = root;
				s->C[1] = p;
				s->n = 1;
				cout<<s->C[1]<<endl;
				s->keys[0] = k;
				root = s;
		}
		//root->insertar(k);
	}

}


/*
void BTreeNode::insertNonFull(int k)
{
    int i = n-1;
    if (leaf == true)
    {
        while (i >= 0 && keys[i] > k)
        {
            keys[i+1] = keys[i];
            i--;
        }

        keys[i+1] = k;
        n = n+1;
    }
    else
    {
        while (i >= 0 && keys[i] > k)
            i--;

       // BTreeNode<T> * q = 0;
       // BTreeNode<T> * nn = search(k, q);
        if (C[i+1]->n == t && ! C[i+1]->hayEspacio(k))
        {
            splitChild(i+1, C[i+1]);

            if (keys[i+1] < k)
                i++;
        }
        C[i+1]->insertNonFull(k);
    }
}
*/
/*
void BTreeNode::splitChild(int i, BTreeNode<T> *y)
{
    BTreeNode<T> *z = new BTreeNode(y->t, y->leaf);
    z->n = ((int)t / 2)-1;

    for (int j = 0; j < ((int )t / 2) -1; j++)
        z->keys[j] = y->keys[j+((int )t / 2)+1];

    if (y->leaf == false)
    {
        for (int j = 0; j < ((int )t / 2)+1; j++)
            z->C[j] = y->C[j+((int )t / 2) +1];
    }

    y->n = ((int )t / 2);

    for (int j = n; j >= i+1; j--)
        C[j+1] = C[j];

    C[i+1] = z;

    for (int j = n-1; j >= i; j--)
        keys[j+1] = keys[j];

    keys[i] = y->keys[(int )t / 2];

    n = n + 1;
}
*/
int main()
{
    BTree<int> t(5);
    for(int i =1 ;i <= 200; i++){
    	t.insertar(i);
    }

    t.printDot("archivo.dot");
	system("dot -Tpng archivo.dot -o archivo.png");
    cout<<"fin"<<endl;

    return 0;
}
