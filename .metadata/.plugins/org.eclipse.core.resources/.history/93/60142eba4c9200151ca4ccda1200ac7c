/*
 * Puzzle.cpp
 *
 *  Created on: 23 de nov. de 2015
 *      Author: santiago
 */

#include "Puzzle.h"

Puzzle::Puzzle(int size) {
	this->size = size;
	CrearPuzzleAleatorio(size);
}

int Puzzle::getCantidadMovimientos() const {
	return cantidadMovimientos;
}

void Puzzle::setCantidadMovimientos(int cantidadMovimientos) {
	this->cantidadMovimientos = cantidadMovimientos;
}

int* Puzzle::getDatos() const {
	return datos;
}

void Puzzle::setDatos(int* datos) {
	this->datos = datos;
}

int Puzzle::getPosActual() const {
	return posActual;
}

void Puzzle::setPosActual(int posActual) {
	this->posActual = posActual;
}

int Puzzle::getSize() const {
	return size;
}

void Puzzle::setSize(int size) {
	this->size = size;
}

Puzzle::Puzzle(char* items, int size) {
}

void Puzzle::CrearPuzzleAleatorio(int size) {
	datos = new int[size*size];
	int d[] = {1,2,3,4,5,6,7,8,9};
	datos = d;

	for(int i = 1; i<=size*size ; i++){
		datos[i-1] = i;
	}
	pasos.push_back(datos);
	posActual = 8;
}

void Puzzle::ResolverPuzzle() {
	int * q = datos;
	while(Similitud(q) != 8){
		if(posActual==0){

		}else if((posActual + 1)%size ==0){
			if((posActual + 1 )/3 == 1){

			}else if ((posActual + 1 )/3 == size){

			}else{

			}
		}else if ((posActual-1)%size ==0){
			if((posActual - 1 )/3 == size){

			}else{

			}
		}
	}

}

void Puzzle::ImprimirPaso(int num) {
	for (int i = 0;i<size;i++){
		for(int e = 0; e<size;e++){
			cout<<pasos[num][i*size+e]<<"-";
		}
		cout<<endl;
	}
}

int Puzzle::Similitud(int * dat) {
	int res = 0;
	for(int i = 0; i< size*size; i++){
		if(dat[i] == i+1)res++;
	}
}

Puzzle::~Puzzle() {
	// TODO Auto-generated destructor stub
}

